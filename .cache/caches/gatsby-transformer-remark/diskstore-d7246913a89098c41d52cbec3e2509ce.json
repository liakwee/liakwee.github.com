{"expireTime":9007200801330977000,"key":"transformer-remark-markdown-html-08893280ec35b980af6e603f4a334417-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-prismjsgatsby-remark-autolink-headersgatsby-remark-katex-","val":"<p>What if you want custom UI interactions embedded in your Markdown?</p>\n<p>By using <code class=\"language-text\">rehype-react</code> with the <code class=\"language-text\">htmlAst</code> field, you can write custom React components and then reference them from your Markdown files, or map generic HTML elements like <code class=\"language-text\">&lt;ul&gt;</code> or <code class=\"language-text\">&lt;h2&gt;</code> to your own components.</p>\n<p><em>Note: this functionality was added in version 1.7.31 of gatsby-transformer-remark</em></p>\n<h2 id=\"writing-a-component\"><a href=\"#writing-a-component\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a component</h2>\n<p>Write the component the way you normally would. For example, here’s a simple “Counter” component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> counterStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* styles skipped for brevity */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    initialvalue<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleIncrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleDecrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counterStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>strong style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`1 1`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleDecrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleIncrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"enabling-the-component\"><a href=\"#enabling-the-component\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling the component</h2>\n<p>In order to display this component within a Markdown file, you’ll need to add a reference to the component in the template that renders your Markdown content. There are five parts to this:</p>\n<ol>\n<li>\n<p>Install <code class=\"language-text\">rehype-react</code> as a dependency</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># If you use Yarn</span>\nyarn add rehype-react\n\n<span class=\"token comment\"># If you use npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save rehype-react</code></pre></div>\n</li>\n<li>\n<p>Import <code class=\"language-text\">rehype-react</code> and whichever components you wish to use</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> rehypeReact <span class=\"token keyword\">from</span> <span class=\"token string\">\"rehype-react\"</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Counter\"</span></code></pre></div>\n</li>\n<li>\n<p>Create a render function with references to your custom components</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> renderAst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">rehypeReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  createElement<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">,</span>\n  components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"interactive-counter\"</span><span class=\"token punctuation\">:</span> Counter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Compiler</code></pre></div>\n<p>I prefer to use hyphenated names to make it clear that it’s a custom component.</p>\n</li>\n<li>\n<p>Render your content using <code class=\"language-text\">htmlAst</code> instead of <code class=\"language-text\">html</code></p>\n<p>This will look different depending on how you were previously referring to the post object retrieved from GraphQL, but in general you’ll want to replace this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderAst</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span>htmlAst<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Change <code class=\"language-text\">html</code> to <code class=\"language-text\">htmlAst</code> in your <code class=\"language-text\">pageQuery</code></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># ...</span>\nmarkdownRemark<span class=\"token punctuation\">(</span><span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">slug</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$slug</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  htmlAst <span class=\"token comment\"># previously `html`</span>\n\n  <span class=\"token comment\"># other fields...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"using-the-component\"><a href=\"#using-the-component\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the component</h2>\n<p>Now, you can directly use your custom component within your Markdown files! For instance, if you include the tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>interactive-counter</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>interactive-counter</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You’ll end up with an interactive component:</p>\n<p><interactive-counter></interactive-counter></p>\n<p>In addition, you can also pass attributes, which can be used as props in your component:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>interactive-counter</span> <span class=\"token attr-name\">initialvalue</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>interactive-counter</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><interactive-counter initialvalue=\"10\"></interactive-counter></p>\n<h2 id=\"mapping-from-generic-html-elements\"><a href=\"#mapping-from-generic-html-elements\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping from generic HTML elements</h2>\n<p>You can also map a generic HTML element to one of your own components. This can be particularly useful if you are using something like styled-components as it allows you to share these primitives between markdown content and the rest of your site. It also means the author of the Markdown doesn’t need to use any custom markup - just standard markdown.</p>\n<p>For example if you have a series of header components:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> PrimaryTitle <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token string\">`…`</span></span>\n<span class=\"token keyword\">const</span> SecondaryTitle styled<span class=\"token punctuation\">.</span>h2<span class=\"token template-string\"><span class=\"token string\">`…`</span></span>\n<span class=\"token keyword\">const</span> TertiaryTitle styled<span class=\"token punctuation\">.</span>h3<span class=\"token template-string\"><span class=\"token string\">`…`</span></span></code></pre></div>\n<p>You can map headers defined in markdown to these components:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> renderAst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">rehypeReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  createElement<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">,</span>\n  components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    h1<span class=\"token punctuation\">:</span> PrimaryTitle<span class=\"token punctuation\">,</span>\n    h2<span class=\"token punctuation\">:</span> SecondaryTitle<span class=\"token punctuation\">,</span>\n    h3<span class=\"token punctuation\">:</span> TertiaryTitle<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Compiler</code></pre></div>\n<p>And headers defined in markdown will be rendered as your components instead of generic HTML elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> This will be rendered as a PrimaryTitle component</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> This will be rendered as a SecondaryTitle component</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> This will be rendered as a TertiaryTitle component</span></code></pre></div>\n<h2 id=\"caveats\"><a href=\"#caveats\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h2>\n<p>Although it looks like we’re now using React components in our Markdown files, that’s not <em>entirely</em> true: we’re adding custom HTML elements which are then replaced by React components. This means there are a few things to watch out for.</p>\n<h3 id=\"always-add-closing-tags\"><a href=\"#always-add-closing-tags\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Always add closing tags</h3>\n<p>JSX allows us to write self-closing tags, such as <code class=\"language-text\">&lt;my-component /&gt;</code>. However, the HTML parser would incorrectly interpret this as an opening tag, and be unable to find a closing tag. For this reason, tags written in Markdown files always need to be explicitly closed, even when empty:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-component</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-component</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"attribute-names-are-always-lowercased\"><a href=\"#attribute-names-are-always-lowercased\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute names are always lowercased</h3>\n<p>HTML attribute names are not case-sensitive. <code class=\"language-text\">gatsby-transformer-remark</code> handles this by lowercasing all attribute names; this means that any props on an exposed component must also be all-lowercase.</p>\n<blockquote>\n<p>The prop in the <code class=\"language-text\">Counter</code> example above was named <code class=\"language-text\">initialvalue</code> rather than <code class=\"language-text\">initialValue</code> for exactly this reason; if we tried to access <code class=\"language-text\">this.props.initialValue</code> we’d have found it to be <code class=\"language-text\">undefined</code>.</p>\n</blockquote>\n<h3 id=\"attributes-are-always-strings\"><a href=\"#attributes-are-always-strings\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attributes are always strings</h3>\n<p>Any prop that gets its value from an attribute will always receive a string value. Your component is responsible for properly deserializing passed values.</p>\n<ul>\n<li>Numbers are always passed as strings, even if the attribute is written without quotes: <code class=\"language-text\">&lt;my-component value=37&gt;&lt;/my-component&gt;</code> will still receive the string <code class=\"language-text\">&quot;37&quot;</code> as its value instead of the number <code class=\"language-text\">37</code>.</li>\n<li>React lets you pass a prop without a value, and will interpret it to mean <code class=\"language-text\">true</code>; for example, if you write <code class=\"language-text\">&lt;MyComponent isEnabled /&gt;</code> then the props would be <code class=\"language-text\">{ isEnabled: true }</code>. However, in your Markdown, an attribute without a value will not be interpreted as <code class=\"language-text\">true</code>; instead, it will be passed as the empty string <code class=\"language-text\">&quot;&quot;</code>. Similarly, passing <code class=\"language-text\">somevalue=true</code> and <code class=\"language-text\">othervalue=false</code> will result in the string values <code class=\"language-text\">&quot;true&quot;</code> and <code class=\"language-text\">&quot;false&quot;</code>, respectively.</li>\n<li>You can pass object values if you use <code class=\"language-text\">JSON.parse()</code> in your component to get the value out; just remember to enclose the value in single quotes to ensure it is parsed correctly (e.g. <code class=\"language-text\">&lt;my-thing objectvalue=&#39;{&quot;foo&quot;: &quot;bar&quot;}&#39;&gt;&lt;/my-thing&gt;</code>).</li>\n</ul>\n<blockquote>\n<p>Notice in the <code class=\"language-text\">Counter</code> example how the initial <code class=\"language-text\">value</code> has been cast using the <code class=\"language-text\">Number()</code> function.</p>\n</blockquote>\n<h2 id=\"possibilities\"><a href=\"#possibilities\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Possibilities</h2>\n<p>Custom components embedded in Markdown enables many features that weren’t possible before; here are some ideas, starting simple and getting complex:</p>\n<ul>\n<li>Write a live countdown clock for an event such as Christmas, the Super Bowl, or someone’s birthday. Suggested markup: <code class=\"language-text\">&lt;countdown-clock&gt; 2019-01-02T05:00:00.000Z &lt;/countdown-clock&gt;</code></li>\n<li>Write a component that displays as a link with an informative hovercard. For example, you might want to write <code class=\"language-text\">&lt;hover-card subject=&quot;ostrich&quot;&gt; ostriches &lt;/hover-card&gt;</code> to show a link that lets you hover to get information on ostriches.</li>\n<li>If your Gatsby site is for vacation photos, you might write a component that allows you to show a carousel of pictures, and perhaps a map that shows where each photo was taken.</li>\n<li>Write a component that lets you add live code demos in your Markdown, using <a href=\"https://formidable.com/open-source/component-playground/\">component-playground</a> or something similar.</li>\n<li>Write a component that wraps a <a href=\"/hello-world-kitchen-sink/#tables\">GFM table</a> and displays the data from the table in an interactive graph.</li>\n</ul>"}